#+TITLE: Scheme Journey
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com

* Installation

ref:
+ [[http://community.schemewiki.org/?emacs-tutorial][scheme in emacs]]
+ [[https://www.youtube.com/watch?v=J5jxMRlXvDw][youtube video]]

#+begin_src emacs-lisp
  ;; Always do syntax highlighting
  (global-font-lock-mode 1)

  ;; Also highlight parens
  (setq show-paren-delay 0
        show-paren-style 'parenthesis)
  (show-paren-mode 1)

  ;;; This is the binary name of my scheme implementation
  (setq scheme-program-name "scm")
#+end_src

#+begin_src shell
sudo apt-get install -y racket
#+end_src

usage: to run scheme type =M-x run-scheme=

* The Little Schemer
** the ten commandments
** the five rules
** preface:
   
   recursion is schema's natural computational mechanism.
   #+begin_src scheme
     (define atom?
       (lambda (x)
         (and (not (pair? x))
              (not (null? x)))))
   #+end_src

** toys
   #+begin_src scheme
     (quote atom)
     ((xyz) a )

     (a b c)
     (car '(a b c))
     (cdr '(a b c))

     (cons 1 2)

     (atom? 1)
   #+end_src
** do it, do it again, and again, and again ...
   defining atom?
   #+begin_src scheme
     (define atom?
       (lambda
           (x)
         (and (not (pair? x))
              (not (null? x)))))
   #+end_src

   defining lat?
   #+begin_src scheme
     (define lat?
       (lambda (l)
         (cond
          ((null? l) #t)
          ((atom? (car l)) (lat? (cdr l)))
          (else #f)
          )))
   #+end_src

   #+begin_src scheme
     (define l '(Jack Sprat could eat no chicken fat))
     (lat? l)
   #+end_src

   
** cons the magnificent
** numbers games
** *Oh My Gawd*: It's full of stars
** Shadows
** Friends and relations
** Lambda the ultimate
** ...  and again, and again, and again, ...
** what is the value of all of this?
** Intermission
#+begin_src emacs-lisp
(message "hello world")
#+end_src

#+RESULTS:
: hello world

* Andy Balaam
#+begin_src scheme
(define foo 3)

#+end_src
