#+TITLE: Scheme Journey
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com

* Installation

ref:
+ [[http://community.schemewiki.org/?emacs-tutorial][scheme in emacs]]
+ [[https://www.youtube.com/watch?v=J5jxMRlXvDw][youtube video]]

#+begin_src emacs-lisp
  ;; Always do syntax highlighting
  (global-font-lock-mode 1)

  ;; Also highlight parens
  (setq show-paren-delay 0
        show-paren-style 'parenthesis)
  (show-paren-mode 1)

  ;;; This is the binary name of my scheme implementation
  (setq scheme-program-name "scm")
#+end_src

#+begin_src shell
sudo apt-get install -y racket
#+end_src

usage: to run scheme type =M-x run-scheme=

* The Little Schemer
** the ten commandments
   + *First Commandment* : 
     When recurring on a list of atoms, lat, ask two questions about it: ( null ? lat) and else. When recurring on a number, n , ask two questions about it: (zero? n) and else.
   + *Second Commandment*: use =cons= to build lists.
   + *Third Commandment*: when building a list, describe the first
     typical element, and then cons it onto the natural recursion.
   + *Fourth Commandment*: Always change at least one argument while recurring. It
must be changed to be closer to termination. The changing
argument must be tested in the termination condition:
when using cdr, test termination with null?.
   + *Fifth Commandment*: for + terminating => 0 for * => 1 for list terminating => ()

** the five rules
** preface:
   
   recursion is schema's natural computational mechanism.
   #+begin_src scheme
     (define atom?
       (lambda (x)
         (and (not (pair? x))
              (not (null? x)))))
   #+end_src

** toys
   #+begin_src scheme
     (quote atom)
     ((xyz) a )

     (a b c)
     (car '(a b c))
     (cdr '(a b c))

     (cons 1 2)

     (atom? 1)
   #+end_src
** do it, do it again, and again, and again ...
   defining atom?
   #+begin_src scheme
     (define atom?
       (lambda
           (x)
         (and (not (pair? x))
              (not (null? x)))))
   #+end_src

   defining lat?
   #+begin_src scheme
     (define lat?
       (lambda (l)
         (cond
          ((null? l) #t)
          ((atom? (car l)) (lat? (cdr l)))
          (else #f)
          )))
   #+end_src

   #+begin_src scheme
     (define l '(Jack Sprat could eat no chicken fat))
     (lat? l)
   #+end_src

   defining member?
   #+begin_src scheme
     (define member?
       (lambda (a lat)
         (cond
          ((null? lat) #f)
          (else (or (eq? car(lat) a)
                    (member? (a cdr(lat))))))))
   #+end_src

** cons the magnificent
   #+begin_src scheme
     (define a 'mint)
     (define lat '(
                   lamb
                   chops
                   and
                   mint
                   flavored
                   mint
                   jelly
                   ))
     (rember a lat)
             
   #+end_src

   define rember
   #+begin_src scheme
     (define rember
       (lambda (a lat)
         (cond
          ( (null? lat) (quote ()))
          (else (cond
                 ((eq? (car lat) a) (cdr lat))
                 (else (rember a (cdr lat))))))))
   #+end_src
   #+begin_src scheme
  (define rember 
    (lambda (a lat)
      (cond
       ((null? lat) (quote ()))
       (else (cond ((eq? a (car lat)) (cdr lat))
                   (else (rember a (cdr lat))))))))
#+end_src

   define insertR
   #+begin_src scheme
          (define insertR
            (lambda new old lat
                    (cond
                     ((null? lat) (quote ()))
                     (else (cond
                            ((eq? old (car lat))
                             (cons new (cdr lat)))
                            (else (cons (car lat)
                                        (insertR new old
                                                 (cdr lat)))))))))
   #+end_src
   #+begin_src scheme
  (define insertL
    (lambda (new old lat)
      (cond
       ((null? lat) (quote ()))
       (else (cond
              ((eq? (car lat) old)
               (cons new (cons old (cdr lat))))
              (else (cons (car lat)
                          (insertL new old (cdr lat)))))))))
#+end_src

   #+begin_src scheme
     (define insertL
       (lambda (new old lat)
         (cond
          ((null? lat) (quote ()))
          ((eq? old (car lat)) (cons ))
          )))
   #+end_src
** numbers games
** *Oh My Gawd*: It's full of stars
** Shadows
** Friends and relations
** Lambda the ultimate
** ...  and again, and again, and again, ...
** what is the value of all of this?
** Intermission
#+begin_src emacs-lisp
(message "hello world")
#+end_src

#+RESULTS:
: hello world

* Andy Balaam - Scheme videos

  #+begin_src scheme
    (define foo 3)
  #+end_src

  #+begin_src scheme
    (define (square x)
      (* x x))
  #+end_src

  #+begin_src scheme
    (define (abs x)
      (if (< x 0)
          (- x)
          x))
  #+end_src

  #+begin_src scheme
    (sort (list 1 10 9))
  #+end_src
