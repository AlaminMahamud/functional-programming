* Starting Up
  #+begin_src emacs-lisp
    ;; This sets up the load path so that we can override it
    (package-initialize)
    (add-to-list 'load-path "~/code/org2blog")
    (add-to-list 'load-path "~/Dropbox/2014/presentations/org-reveal")
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
    (setq custom-file "~/.emacs.d/custom-settings.el")
    (load custom-file t)
  #+end_src
** helm grep book notes

   #+begin_src emacs-lisp
     (defvar my/book-notes-directory "~/Dropbox/org/books")
     (defun my/helm-do-grep-book-notes ()
       "Search my book notes."
       (interactive)
       (helm-do-grep-1 (list my/book-notes-directory)))
   #+end_src




* Personal Information
  #+begin_src emacs-lisp
      (setq user-full-name "Alamin Mahamud"
            user-email-address "alamin.ineedahelp@gmail.com")
  #+end_src
* Emacs init
** Add package sources
   #+begin_src emacs-lisp
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
     (unless (assoc-default "org" package-archives)
       (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
   #+end_src
** Add my elisp dir and other files
   #+begin_src emacs-lisp
          (add-to-list 'load-path "~/elisp")
          (unless (package-installed-p 'use-package)
            (package-install 'use-package))
          (setq use-package-verbose t)
          (setq use-package-always-ensure t)
          (require 'use-package)
          (use-package auto-compile
            :config
            (auto-compile-on-load-mode)
            (auto-compile-on-save-mode)
            (setq load-prefer-newer t))
   #+end_src
** load secrets
   #+begin_src emacs-lisp
   (load "~/.emacs.secrets" t)
   #+end_src
* org
  
#+begin_src emacs-lisp
    (setq org-modules '(org-bbdb
                      org-gnus
                      org-drill
                      org-info
                      org-jsinfo
                      org-habit
                      org-irc
                      org-mouse
                      org-protocol
                      org-annotate-file
                      org-eval
                      org-expiry
                      org-interactive-query
                      org-man
                      org-collector
                      org-panel
                      org-screen
                      org-toc))

(eval-after-load 'org
 '(org-load-modules-maybe t))
;; Prepare stuff for org-export-backends
(setq org-export-backends '(org latex icalendar html ascii))
  #+end_src
  
#+begin_src emacs-lisp
(bind-key "C-c r" 'org-capture)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c L" 'org-insert-link-global)
(bind-key "C-c O" 'org-open-at-point-global)
(bind-key "<f9> <f9>" 'org-agenda-list)
(bind-key "<f9> <f8>" (lambda () (interactive) (org-capture nil "r")))
#+end_src

